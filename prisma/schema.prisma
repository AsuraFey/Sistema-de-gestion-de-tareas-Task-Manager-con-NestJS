// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  username     String         @unique
  password     String
  roleId       Int
  role         Role           @relation("RoleUsers", fields: [roleId], references: [id])
  profile      Profile?
  tasks        Task[]         @relation("UserTasks") // Relación uno a muchos con tareas
  refreshToken RefreshToken[]
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  dueDate     DateTime
  status      String    @default("Asignada")
  userId      Int
  user        User      @relation("UserTasks", fields: [userId], references: [id])
  tags        TaskTag[] // Relación muchos a muchos con etiquetas
}

model Profile {
  id          Int     @id @default(autoincrement())
  address     String?
  phoneNumber String?
  user        User    @relation(fields: [userId], references: [id])
  userId      Int     @unique // Relación uno a uno con el usuario
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  tasks TaskTag[] // Relación muchos a muchos con tareas
}

model TaskTag {
  taskId Int
  tagId  Int
  task   Task @relation(fields: [taskId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([taskId, tagId]) // Combinación de taskId y tagId como clave primaria
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Permission {
  id        Int      @id @default(autoincrement())
  resource  Resource
  actions   Action[]
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    Int?
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  permissions Permission[] // Relación con Permission
  users       User[]    @relation("RoleUsers")
}

enum Resource {
  settings
  tasks
  users
}

enum Action {
  read
  create
  update
  delete
}
